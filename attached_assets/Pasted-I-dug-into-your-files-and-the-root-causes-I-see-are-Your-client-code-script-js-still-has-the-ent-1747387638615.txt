I dug into your files and the root causes I see are:

Your client code (script.js) still has the entire Express/require() server pasted at the bottom
That means the browser is choking on require('express') (and everything after), and your UI logic never really settles in a single, consistent run.

Your “addNewTask” logic is wildly over-engineered
All those fall-backs end up sometimes grabbing the root <ul> instead of the TRIAGE list, so new tasks get dropped one level too high.

You’re still building your tree twice (once implicitly in db.js or in an earlier script injection, then again in DOMContentLoaded) causing every node to render two copies.

1) Split Client vs Server
Move all of the code from the line

js
Copy
Edit
// Small Express server to provide API for Replit Database
const express = require("express");
...
down to

js
Copy
Edit
process.on('SIGINT', () => { ... });
into its own server.js file. Your browser should never see any require() calls.

In index.html only load

html
Copy
Edit
<script src="db.js"></script>
<script src="script.js"></script>
Run your server via node server.js (Replit will do that automatically if you configure your .replit).

2) Collapse addNewTask() to a single reliable selector
Replace your entire complex “find triageChildList” block with:

js
Copy
Edit
// Right inside addNewTask(), instead of all the fallbacks:
const triageList = document
  .querySelector('.section-header[data-id="section-triage"]')
  .closest('li')                    // <li> around the “TRIAGE” header
  .querySelector('.task-children .task-list');

if (!triageList) {
  console.error('Triage list not found, aborting');
  showToast('Error', 'Cannot find Triage');
  return;
}
// now append your newTaskElement there
triageList.appendChild(newTaskElement);
That guarantees every new task goes exactly one level under TRIAGE.

3) Only build the tree once
In script.js, you should only ever call:

js
Copy
Edit
document.addEventListener('DOMContentLoaded', async () => {
  // … load or sample tasks into tasksToUse …
  const root = document.getElementById('task-tree');
  root.innerHTML = '';
  buildTree(tasksToUse, root);
});
and remove any stray top-level buildTree(...) invocations (and remove any from db.js as well).

Summary of the minimal edits
Remove everything from your script.js after the auto-save timer block (all the Express server code).

Refactor addNewTask() to use the single querySelector('.section-header[data-id="section-triage"] + .task-children .task-list') approach.

Ensure the only buildTree() call lives inside DOMContentLoaded, and you clear #task-tree immediately before it.

Once you:

clear your browser console of require is not defined errors,

move the Express server into server.js,

simplify addNewTask() so it never grabs the wrong <ul>,

and only build the tree a single time—

you will no longer see

duplicate lists,

mis-indented new tasks,

or weird flag-icon styling (because the correct helper will run exactly once per node).