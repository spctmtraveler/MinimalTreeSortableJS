1. Enable API & credentials
   1.1 In Google Cloud Console:
       • Create or select a project  
       • Navigate to “APIs & Services” → “Library”  
       • Enable “Google Sheets API”  
   1.2 Create a Service Account:
       • “IAM & Admin” → “Service Accounts” → “Create Service Account”  
       • Grant role “Editor”  
       • In “Keys” add a new JSON key → download as service-account.json  

2. Share your sheet
   2.1 Open your Google Sheet  
   2.2 Click “Share” → add the Service Account email → grant Editor access  

3. Install client library (backend)
   • Node.js:  
       npm install googleapis  
   • (Or Python):  
       pip install google-api-python-client google-auth  

4. Initialize Sheets client (Node.js example)
       const { google } = require('googleapis');
       const auth = new google.auth.GoogleAuth({
         keyFile: 'service-account.json',
         scopes: ['https://www.googleapis.com/auth/spreadsheets']
       });
       const sheets = google.sheets({ version: 'v4', auth });

5. Read data
   5.1 Define readRecords():
         async function readRecords() {
           const res = await sheets.spreadsheets.values.get({
             spreadsheetId: 'YOUR_SPREADSHEET_ID',
             range: 'Records!A:D'
           });
           return res.data.values;   // array of rows
         }

6. Write data
   6.1 Define addRecord(title, notes):
         async function addRecord(title, notes) {
           await sheets.spreadsheets.values.append({
             spreadsheetId: 'YOUR_SPREADSHEET_ID',
             range: 'Records!A:D',
             valueInputOption: 'USER_ENTERED',
             resource: {
               values: [
                 [
                   Date.now().toString(),
                   title,
                   notes,
                   new Date().toISOString()
                 ]
               ]
             }
           });
         }

7. Swap your DB calls
   7.1 Import or require readRecords / addRecord  
   7.2 Replace existing “fetch all” queries with await readRecords()  
   7.3 Replace existing “insert” calls with await addRecord(title, notes)  

8. (Optional) Python alternative
   8.1 Initialize gspread:
         import gspread
         from google.oauth2.service_account import Credentials
         creds = Credentials.from_service_account_file(
           'service-account.json',
           scopes=['https://www.googleapis.com/auth/spreadsheets']
         )
         client = gspread.authorize(creds)
         sheet = client.open_by_key('YOUR_SPREADSHEET_ID').worksheet('Records')
   8.2 Read:
         records = sheet.get_all_records()
   8.3 Write:
         sheet.append_row([str(int(time.time()*1000)), title, notes, datetime.utcnow().isoformat()])  
